import java.awt.Color;
import java.io.Console;
import java.util.*;

public class Player {
	private int pos;
	private int balance; // default 0
	private ArrayList<Property> props;
	private boolean chanceCard;
	private boolean chestCard;
	private boolean inJail;
	private static int numPlayers;
	private int playerNum;
	private String name;
	private static String[] pieces = {"x","tri","plus","oval"};
	private static Color[] colors = {Color.red,Color.green,Color.blue,Color.magenta};
	private Board board;
	private int doublesNum;
	private int jailRollCount;
	
	public Player(String name, Board board) {
		//System.out.println("PLAYERSTART");
		balance = 1500;
		playerNum = numPlayers;
		numPlayers++;
		this.name = name;
		props = new ArrayList<Property>();
		this.board = board;
	}
	
	public int getPlayerNum() {
		return playerNum;
	}
	
	/*public ArrayList<Property> getProps() {
		ArrayList<Property> props2 = props;
		return props2;
	}*/
	
	public void changeBal(int num) {
		int var = balance;
		balance += num;
		if (balance < 0/*&&no more properties owned*/) {
			Board.removePlayer(playerNum);
		}
		/*if (var > balance) {
		 *  boolean quit = false
			while (balance < 0 && quit == false) {
				int mort = mortgage();
				balance = balance + mort;
				System.out.println("Do you wish to continue mortgaging?")
				
			}
		}*/
	}
	
	public int numberOfHouses() {
		int count = 0;
		for (int i = 0; i < props.size(); i++) {
			if (props.get(i).getHouses() != 0) {
				count = count + props.get(i).getHouses();
			}
		}
		return count;
	}
	
	public int numberOfHotels() {
		int count = 0;
		for (int i = 0; i < props.size(); i++) {
			if (props.get(i).getHotel() == true) {
				count++;
			}
		}
		return count;
	}
	
	public void move(Board board) {
		//inJail = true;
		//setPos(40,false);
		Scanner scan = new Scanner(System.in);
		/*System.out.println("Enter pos to move to:");
		int num = scan.nextInt();
		setPos(num,false);*/
		int roll1 = Board.rollDice();
		int roll2 = Board.rollDice();
		//int roll1 = 5;
		//int roll2 = 6;
		int num = roll1 + roll2;
		if(roll1==roll2) {
			doublesNum++;
		} else {
			doublesNum=0;
		}
		Board.setLastRoll(num);
		System.out.println("(" + roll1 + ") + (" + roll2 + ") = (" + num + ")");
		if(inJail&&doublesNum==1) {
			System.out.println("You rolled doubles and got out of jail");
			leaveJail(board);
		} else if(inJail) {
			System.out.println("You failed to roll doubles");
			jailRollCount++;
		}
		if(jailRollCount == 3) {
			jailRollCount = 0;
			System.out.println("You pay a $50 fee to leave jail");
			checkPlayer(playerNum);
			changeBal(-50);
			leaveJail(board);
		}
		if(doublesNum==3) {
			System.out.println("You rolled doubles three times and are now in jail");
			setPos(40,false);
			doublesNum=0;
		} else {
		/*Board.setLastRoll(12);
		Scanner scan = new Scanner(System.in);
		System.out.println("Enter pos to move to:");
		int newP = scan.nextInt();
		setPos(newP,newP<pos);*/
		if ((pos + num) > 39 && inJail == false) {
			pos = pos - 40 + num;
			changeBal(200);
			System.out.println("Collect $200 for passing Go!");
			checkPlayer(playerNum);
		} else if(!inJail) {
			pos = pos + num;
		}
		//System.out.println("Position: "+pos);
		board.move();
		checkSpace(pos);
		Board.getTiles()[pos].checkPos(playerNum, pos);
		if(doublesNum>0) {
			System.out.println("You rolled doubles... press enter to roll again");
			scan.nextLine();
			move(board);
		}
		}
		/*if (roll1 == roll2 && inJail == true) {
			leaveJail();
		} else if (roll1 == roll2) {
			roll1 = Board.rollDice();
		    roll2 = Board.rollDice();
			num = roll1 + roll2;
			System.out.println("(" + roll1 + ") + (" + roll2 + ") = (" + num + ")");
			if ((pos + num) > 39) {
				pos = pos - 40 + num;
				changeBal(200);
			} else {
				pos = pos + num;
			}
			Board.getTiles()[pos].checkPos(playerNum, num);
			if (roll1 == roll2) {
				roll1 = Board.rollDice();
			    roll2 = Board.rollDice();
				num = roll1 + roll2;
				System.out.println("(" + roll1 + ") + (" + roll2 + ") = (" + num + ")");
				if (roll1 == roll2) {
					pos = 40;
				} else {
					if ((pos + num) > 39) {
						pos = pos - 40 + num;
						changeBal(200);
					} else {
						pos = pos + num;
					}
					Board.getTiles()[pos].checkPos(playerNum, num);
				}
			}
		}*/
	}
	
	public void setPos(int change) {
		Scanner scan = new Scanner(System.in);
		pos+=change;
		if(pos>=40) {
			pos-=40;
		} else if(pos<0) {
			pos+=40;
		}
		System.out.print("Press enter to continue");
		scan.nextLine();
		board.move();
		Board.getTiles()[pos].checkPos(playerNum,pos);
	}
	
	public void setPos(int position, boolean passGo) {
		Scanner scan = new Scanner(System.in);
		if(position==40) {
			inJail=true;
			pos=position;
			System.out.println("You are now in jail...");
		} else if (position < pos && passGo == true) {
			pos = position;
			changeBal(200);
			System.out.println("Collect $200 for passing Go!");
			checkPlayer(playerNum);
		} else if (position > pos) {
			pos = position;
		}
		System.out.print("Press enter to continue");
		scan.nextLine();
		if(!inJail) {
			checkSpace(pos);
			Board.getTiles()[pos].checkPos(playerNum,pos);
		}
		board.move();
		
	}
	
	public int getPos() {
		return pos;
	}
	
	private void leaveJail(Board board) {
		inJail = false;
		Scanner scan = new Scanner(System.in);
		pos = 10;
		board.move();
		System.out.println("You have left jail press enter to continue");
		scan.nextLine();
	}
	
	private boolean ownsMonopoly(int num) {
		/*int num = -1;
		for(Property prop : props) {
			if(prop.getPos()==pos) {
				num = props.indexOf(prop);
			}
		}
		if(num==-1) {
			System.out.println("You do not a monopoly on these properties \nso you cannot buy any houses or hotels for this property");
			return false;
		}*/
		int mono = props.get(num).getMonopoly();
		int count = 0;
		for (int i = 0; i < props.size(); i++) {
			if (mono == props.get(i).getMonopoly()) {
				count++;
			}
		}
		if ((mono == 1 || mono == 8) && count == 2) {
			return true;
		} else if (count == 3) {
			return true;
		} else {
			return false;
		}
	}
	
	// The following along with the move method are what a player can do in their turn.
	public void checkSpace() {
		Scanner console = new Scanner(System.in);
		System.out.println("Check Space (Yes or No)? ");
		String str = console.next();
		if (str.substring(0, 1).equals("y") || str.substring(0, 1).equals("Y")) {
			System.out.println("Which Space (Number)? ");
			int num = console.nextInt();
			checkSpace(num);
		}
	}
	
	public void checkSpace(int num) {
		Board.getTiles()[num].printStats();
		int spacesUntil;
		if (pos > Board.getTiles()[num].pos) {
			spacesUntil = 40 - (pos - Board.getTiles()[num].pos);
		} else {
			spacesUntil = Board.getTiles()[num].pos - pos;
		}
		System.out.println("Spaces Until Reached: " + spacesUntil);
	}
	
	public void buyHouses() {
		Board.removePlayer(playerNum);
		/* should allow the player to
		 * buy houses for properties but
		 * only for properties in which
		 * they have a monopoly
		 */
		Scanner console = new Scanner(System.in);
		System.out.println("Purchase house(s)/hotel for a property? ");
		String in = console.nextLine();
		int pNum;
		int num;
		while(in.substring(0,1).toLowerCase().equals("y")) {
			System.out.println("Enter property number");
			num = console.nextInt();
			if (num>=0&&num<Board.getTiles().length) {
				pNum = -1;
				for(Property prop : props) {
					if(prop.getPos()==num) {
						pNum = props.indexOf(prop);
					}
				}
				if(pNum==-1) {
					System.out.println("You do not own a monopoly on these properties \nso you cannot buy any houses or hotels for this property");
					return;
				}
				if (ownsMonopoly(pNum) == true) {
					if (props.get(pNum).getHouses() < 4 && props.get(pNum).getHotel() == false) {
						System.out.println("Purchase House(s) for " + props.get(pNum).getName() + " (Yes or No)?");
						String str2 = console.next();
						if (str2.substring(0, 1).equals("y") || str2.substring(0, 1).equals("Y")) {
							System.out.println("How many (1 - "+ (4 - props.get(pNum).getHouses()) +")?");
							int var = console.nextInt();
							if (var <= (4 - props.get(pNum).getHouses())) {
								if (props.get(pNum).getPos() < 10) {
									changeBal(-(50 * var));
								} else if (props.get(pNum).getPos() > 10 || props.get(pNum).getPos() < 20) {
									changeBal(-(100 * var));
								} else if (props.get(pNum).getPos() > 20 || props.get(pNum).getPos() < 30) {
									changeBal(-(150 * var));
								} else {
									changeBal(-(200 * var));
								}
								props.get(pNum).setHouses(props.get(pNum).getHouses()+var,board);
								System.out.println("You successfully bought "+var+" house for $"+(props.get(pNum).getPos()/10+1)*50+" each for "+props.get(pNum).getName());
							    checkPlayer(playerNum);
							}
						}
					} if (props.get(pNum).getHouses() == 4 && props.get(pNum).getHotel() == false) {
						System.out.println("Purchase Hotel for " + props.get(pNum).getName() + " (Yes or No)?");
						String str2 = console.next();
						if (str2.substring(0, 1).equals("y") || str2.substring(0, 1).equals("Y")) {
							if (props.get(pNum).getPos() < 10) {
								changeBal(-50);
							} else if (props.get(pNum).getPos() > 10 || props.get(pNum).getPos() < 20) {
								changeBal(-100);
							} else if (props.get(pNum).getPos() > 20 || props.get(pNum).getPos() < 30) {
								changeBal(-150);
							} else {
								changeBal(-200);
							}
							System.out.println("Yu successfully bought a hotel for "+props.get(pNum).getName());
							props.get(pNum).setHotel(true,board);
							props.get(pNum).setHouses(0,board);
						}
					}
				}
			}
		System.out.println("Purchase house(s)/hotel for a property? ");
		in = console.next();
		}
	}
	
	public static void checkPlayer() {
		/* should print the player's 
		 * name, balance, and their
		 * owned properties
		 */
		Scanner console = new Scanner(System.in);
		//boolean checking = true;
		System.out.println("Do you want to check another player? ");
		if(console.next().substring(0,1).toLowerCase().equals("n")) {
			return;
		}
		//while(checking) {
		System.out.println("Check Player (Player Number)? ");
		int var = console.nextInt();
		checkPlayer(var-1);
		//System.out.println("Do you want to check another player? ");
		/*if(console.next().substring(0,1).toLowerCase().equals("n")) {
			checking = false;
		}*/
		//}
	}
	
	public static void checkPlayer(int pNum) {
		if (pNum >= 0 || pNum < Board.getPlayers().size()) {
			int num = pNum;
			System.out.println("\nPlayer Number: " + (pNum+1)+" Name: "+Board.getPlayers().get(pNum).getName());
			System.out.println("Balance: " + Board.getPlayers().get(pNum).balance);
			System.out.print("Owned Properties: ");
			for (int i = 0; i < Board.getPlayers().get(num).getProps().size(); i++) {
				System.out.print(Board.getPlayers().get(num).getProps().get(i).name+" ");
			}
			System.out.println();
		}
	}
	
	public void setChanceCard(boolean chanceCard) {
		this.chanceCard = chanceCard;
	}
	
	public void setChestCard(boolean chestCard) {
		this.chestCard = chestCard;
	}
	
	public static Color[] getColors() {
		return colors;
	}
	
	public String getName() {
		return name;
	}
	
	public ArrayList<Property> getProps(){
		return props;
	}
	
	public void addProp(Property prop) {
		props.add(prop);
	}
	
	public void setPNum(int num) {
		playerNum = num;
	}
}
